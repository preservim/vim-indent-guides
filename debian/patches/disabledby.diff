Description: support disabling the whole latex-suite by defining the 'did_latexSuite_disabled' global variable
Author: Stefano Zacchiroli <zack@debian.org>

--- a/compiler/tex.vim
+++ b/compiler/tex.vim
@@ -59,6 +59,10 @@
 "   1. menu items for dynamically selecting a ignore warning level.
 " }}}
 
+if exists('did_latexSuite_disabled')
+  finish
+endif
+
 " avoid reinclusion for the same buffer. keep it buffer local so it can be
 " externally reset in case of emergency re-sourcing.
 if exists('b:doneTexCompiler') && !exists('b:forceRedoTexCompiler')
--- a/ftplugin/bib_latexSuite.vim
+++ b/ftplugin/bib_latexSuite.vim
@@ -7,6 +7,10 @@
 " 	bibliographic entries.
 "
 
+if exists('did_latexSuite_disabled')
+  finish
+endif
+
 " source main.vim because we need a few functions from it.
 runtime ftplugin/latex-suite/main.vim
 " Disable smart-quotes because we need to enter real quotes in bib files.
--- a/ftplugin/tex_latexSuite.vim
+++ b/ftplugin/tex_latexSuite.vim
@@ -3,6 +3,10 @@
 "	Maintainer: Srinath Avadhanula
 "		 Email: srinath@fastmail.fm
 
+if exists('did_latexSuite_disabled')
+  finish
+endif
+
 if !exists('s:initLatexSuite')
 	let s:initLatexSuite = 1
 	exec 'so '.fnameescape(expand('<sfile>:p:h').'/latex-suite/main.vim')
--- a/indent/tex.vim
+++ b/indent/tex.vim
@@ -98,6 +98,10 @@
 endif
 let b:did_indent = 1
 
+if exists('did_latexSuite_disabled')
+  finish
+endif
+
 " Delete the next line to avoid the special indention of items
 if !exists("g:tex_indent_items")
     let g:tex_indent_items = 1
--- a/plugin/SyntaxFolds.vim
+++ b/plugin/SyntaxFolds.vim
@@ -87,6 +87,10 @@
 " call defines the region which is deepest in the folding. See MakeTexFolds()
 " for an idea of how this works for latex files.
 
+if exists('did_latexSuite_disabled')
+  finish
+endif
+
 " Function: AddSyntaxFoldItem (start, end, startoff, endoff [, skipStart, skipEnd]) {{{
 function! AddSyntaxFoldItem(start, end, startoff, endoff, ...)
 	if a:0 > 0
--- a/plugin/filebrowser.vim
+++ b/plugin/filebrowser.vim
@@ -13,6 +13,10 @@
 " 		(Both these regexps are '' by default which means no filtering is
 " 		done).
 
+if exists('did_latexSuite_disabled')
+  finish
+endif
+
 " line continuation used here.
 let s:save_cpo = &cpo
 set cpo&vim
--- a/plugin/imaps.vim
+++ b/plugin/imaps.vim
@@ -95,6 +95,10 @@
 "--------------------------------------%<--------------------------------------
 " }}}
 
+if exists('did_latexSuite_disabled')
+  finish
+endif
+
 " line continuation used here.
 let s:save_cpo = &cpo
 set cpo&vim
--- a/plugin/libList.vim
+++ b/plugin/libList.vim
@@ -61,6 +61,10 @@
 " in version 0.1
 " - First version
 
+if exists('did_latexSuite_disabled')
+  finish
+endif
+
 " Has this already been loaded ?
 if exists("loaded_libList")
        finish
--- a/plugin/remoteOpen.vim
+++ b/plugin/remoteOpen.vim
@@ -29,6 +29,10 @@
 " Ofcourse, this requires vim with +clientserver. If not, then RemoteOpen just
 " opens in the present session.
 
+if exists('did_latexSuite_disabled')
+  finish
+endif
+
 " Enclose <args> in single quotes so it can be passed as a function argument.
 com! -nargs=1 RemoteOpen :call RemoteOpen('<args>')
 com! -nargs=? RemoteInsert :call RemoteInsert('<args>')
